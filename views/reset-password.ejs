<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ERP Portal - Reset Password</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
    rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    :root {
      --primary-blue: #1e90ff;
      --primary-teal: #14b8a6;
      --primary-purple: #7c3aed;
      --primary-pink: #ec4899;
      --primary-indigo: #4f46e5;
      --accent-orange: #f97316;
      --bg-light: #f0f4f8;
      --card-bg: #ffffff;
      --text-dark: #1f2937;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Poppins", sans-serif;
      background: var(--bg-light);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow-x: hidden;
      color: var(--text-dark);
    }

    .blob-card {
      background: var(--card-bg);
      border-radius: 15px;
      box-shadow: var(--shadow);
      width: 100%;
      max-width: 28rem;
      padding: 2rem;
    }

    .text-flow {
      color: var(--text-dark);
    }

    .success-flow {
      background: linear-gradient(135deg, #10b981, #059669);
      color: var(--card-bg);
      padding: 1rem 2rem;
      border-radius: 30px;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: var(--shadow);
      animation: slideInLeft 0.5s ease-out;
    }

    .error-flow {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: var(--card-bg);
      padding: 1rem 2rem;
      border-radius: 30px;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: var(--shadow);
      animation: slideInLeft 0.5s ease-out;
    }

    .flowing-button {
      background: linear-gradient(135deg, var(--primary-blue), var(--primary-teal));
      background-size: 200% 200%;
      border: none;
      border-radius: 50px;
      padding: 0.75rem 1.5rem;
      color: var(--card-bg);
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      animation: gradientFlow 3s ease infinite;
      transition: background 0.3s ease;
      position: relative;
      min-width: 120px;
    }

    .flowing-button:active {
      background: linear-gradient(135deg, var(--primary-teal), var(--primary-blue));
    }

    .flowing-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .flowing-button.loading::after {
      content: "";
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid var(--card-bg);
      border-top: 2px solid transparent;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
      margin-left: 0.5rem;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    @keyframes gradientFlow {
      0% {
        background-position: 0% 50%;
      }

      50% {
        background-position: 100% 50%;
      }

      100% {
        background-position: 0% 50%;
      }
    }

    .slide-in-left {
      animation: slideInLeft 0.8s ease-out forwards;
      opacity: 0;
      transform: translateX(-50px);
    }

    @keyframes slideInLeft {
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    .zoom-in {
      animation: zoomIn 1s ease-out forwards;
      opacity: 0;
      transform: scale(0.8);
    }

    @keyframes zoomIn {
      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    input {
      background: var(--card-bg);
      border: 1px solid #e5e7eb;
      color: var(--text-dark);
      outline: none;
      transition: border-color 0.3s ease;
      border-radius: 8px;
    }

    input:focus {
      border-color: var(--primary-blue);
      box-shadow: 0 0 10px rgba(30, 144, 255, 0.3);
    }

    input::placeholder {
      color: #9ca3af;
    }

    .link-button {
      color: var(--primary-blue);
      cursor: pointer;
      transition: color 0.3s ease;
    }

    .link-button:active {
      color: var(--primary-teal);
    }

    .password-container {
      position: relative;
    }

    .password-toggle {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
      color: #9ca3af;
      transition: color 0.3s ease;
    }

    .password-toggle:active {
      color: var(--primary-blue);
    }

    @media (max-width: 640px) {
      .blob-card {
        padding: 1.5rem;
      }

      .flowing-button {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
      }
    }
  </style>
</head>

<body>
  <div class="blob-card slide-in-left">
    <div class="p-4 zoom-in">
      <h2 class="text-3xl font-bold text-flow text-center mb-6">
        Reset Password
      </h2>
      <% if (typeof success !=='undefined' && success) { %>
        <div class="success-flow slide-in-left" id="success-message">
          <div class="flex items-center">
            <i class="fas fa-check-circle text-2xl mr-4"></i>
            <span class="font-semibold text-lg">
              <%= success %>
            </span>
          </div>
          <button class="text-white hover:text-gray-200" onclick="dismissMessage('success-message')"
            aria-label="Close success message">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <% } %>
          <% if (typeof error !=='undefined' && error) { %>
            <div class="error-flow slide-in-left" id="error-message">
              <div class="flex items-center">
                <i class="fas fa-exclamation-circle text-2xl mr-4"></i>
                <span class="font-semibold text-lg">
                  <%= error %>
                </span>
              </div>
              <button class="text-white hover:text-gray-200" onclick="dismissMessage('error-message')"
                aria-label="Close error message">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <% } %>
              <form action="/reset-password" method="POST" class="space-y-4" id="resetPasswordForm">
                <input type="hidden" name="email" value="<%= typeof email !== 'undefined' ? email : '' %>" />
                <div class="password-container">
                  <label for="password" class="text-flow text-sm font-medium mb-1 block">
                    New Password
                  </label>
                  <input type="password" name="password" id="password" placeholder="Enter new password" required
                    class="w-full px-4 py-2" />
                  <i class="fas fa-eye password-toggle" id="togglePassword" onclick="togglePasswordVisibility()"
                    aria-label="Toggle password visibility"></i>
                </div>
                <button type="submit" class="flowing-button w-full" id="resetButton"
                  aria-label="Submit reset password form">
                  Reset Password
                </button>
              </form>
              <p class="text-center mt-4 text-flow">
                <a href="/login" class="link-button" aria-label="Back to login page">Back to Login</a>
              </p>
    </div>
  </div>

  <script>
    function dismissMessage(id) {
      const message = document.getElementById(id);
      if (message) {
        message.style.transition = "opacity 0.5s ease";
        message.style.opacity = "0";
        setTimeout(() => message.remove(), 500);
        console.log(`Dismissed message: ${id}`);
      }
    }

    if (document.getElementById("success-message")) {
      setTimeout(() => dismissMessage("success-message"), 5000);
    }
    if (document.getElementById("error-message")) {
      setTimeout(() => dismissMessage("error-message"), 5000);
    }

    function togglePasswordVisibility() {
      const passwordInput = document.getElementById("password");
      const toggleIcon = document.getElementById("togglePassword");
      if (passwordInput && toggleIcon) {
        const isPassword = passwordInput.type === "password";
        passwordInput.type = isPassword ? "text" : "password";
        toggleIcon.classList.toggle("fa-eye", isPassword);
        toggleIcon.classList.toggle("fa-eye-slash", !isPassword);
        console.log(`Password visibility toggled: ${isPassword ? "shown" : "hidden"}`);
      }
    }

    document
      .getElementById("resetPasswordForm")
      .addEventListener("submit", (e) => {
        const passwordInput = document.querySelector("input[name='password']");
        const emailInput = document.querySelector("input[name='email']");
        const resetButton = document.getElementById("resetButton");
        const password = passwordInput ? passwordInput.value : "";
        const email = emailInput ? emailInput.value : "";
        let errorMessage = null;

        if (!email) {
          errorMessage = "Email is required";
        } else if (password.length < 8) {
          errorMessage = "Password must be at least 8 characters";
        } else if (!/[A-Z]/.test(password) || !/[0-9]/.test(password)) {
          errorMessage = "Password must include at least one uppercase letter and one number";
        }

        if (errorMessage) {
          e.preventDefault();
          const existingError = document.getElementById("error-message");
          if (!existingError) {
            const errorDiv = document.createElement("div");
            errorDiv.id = "error-message";
            errorDiv.className = "error-flow slide-in-left";
            errorDiv.innerHTML = `
                <div class="flex items-center">
                  <i class="fas fa-exclamation-circle text-2xl mr-4"></i>
                  <span class="font-semibold text-lg">${errorMessage}</span>
                </div>
                <button class="text-white hover:text-gray-200" onclick="dismissMessage('error-message')" aria-label="Close error message">
                  <i class="fas fa-times"></i>
                </button>
              `;
            const form = document.getElementById("resetPasswordForm");
            form.parentNode.insertBefore(errorDiv, form);
            setTimeout(() => dismissMessage("error-message"), 5000);
            console.log(`Validation error: ${errorMessage}`);
          }
        } else {
          if (resetButton) {
            resetButton.disabled = true;
            resetButton.classList.add("loading");
            resetButton.innerHTML = "Resetting...";
            console.log("Form submitted with email:", email);
          }
        }
      });

    // Log link clicks for debugging
    const linkButton = document.querySelector(".link-button");
    if (linkButton) {
      linkButton.addEventListener("click", () => {
        console.log("Clicked: Back to login page");
      });
    }

    // Log password toggle clicks
    const togglePassword = document.getElementById("togglePassword");
    if (togglePassword) {
      togglePassword.addEventListener("click", () => {
        console.log("Password toggle clicked");
      });
    }
  </script>
</body>

</html>